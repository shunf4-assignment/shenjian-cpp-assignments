#include <iostream>
#include <Windows.h>
using namespace std;

/* 返回值：0  ：有解
-1 : 原始数据有0-9之外的非法值
-2 ：原始值行/列/九宫有冲突
-3 ：无解
-4 : 其它错误（无内存等）
*/

const short peers[][20] = {
	{ 1,2,3,4,5,6,7,72,9,10,11,18,19,20,27,36,45,8,54,63 },
	{ 64,0,2,3,4,5,6,7,8,73,10,11,18,19,9,28,37,46,55,20 },
	{ 0,65,3,4,5,6,1,8,9,74,11,18,19,20,29,38,7,47,56,10 },
	{ 0,1,66,4,5,6,7,8,75,12,2,14,13,21,22,23,30,39,48,57 },
	{ 0,1,2,67,5,6,7,8,12,76,13,14,3,21,22,23,31,40,49,58 },
	{ 0,1,2,3,68,6,7,8,12,77,14,13,21,22,23,4,32,41,50,59 },
	{ 0,1,2,3,4,69,7,8,78,15,16,17,24,25,26,5,33,42,51,60 },
	{ 0,1,2,3,4,5,70,8,79,16,17,24,25,26,15,34,6,43,52,61 },
	{ 0,1,2,3,4,5,6,71,15,80,17,24,25,26,16,35,7,44,53,62 },
	{ 0,1,2,72,10,11,12,13,14,15,16,17,18,19,20,27,36,45,54,63 },
	{ 64,1,2,0,73,11,12,13,14,15,16,17,18,19,20,28,37,46,9,55 },
	{ 0,65,2,1,9,74,12,13,14,15,16,17,18,19,20,29,38,47,56,10 },
	{ 66,3,4,5,9,10,75,13,14,15,16,17,21,11,23,22,30,39,48,57 },
	{ 67,4,5,9,10,11,76,14,15,16,17,3,21,22,23,31,40,12,49,58 },
	{ 3,68,5,9,10,11,12,77,15,16,17,21,22,23,4,32,41,50,59,13 },
	{ 69,6,7,8,9,10,11,12,13,78,16,17,14,24,25,26,33,42,51,60 },
	{ 70,7,8,9,10,11,12,13,14,79,17,24,25,26,15,34,6,43,52,61 },
	{ 6,71,8,9,10,11,12,13,14,15,16,24,25,26,80,35,7,44,53,62 },
	{ 0,1,2,72,9,10,11,19,20,21,22,23,24,25,26,27,36,45,54,63 },
	{ 64,1,2,0,73,10,11,18,20,21,22,23,24,25,26,28,37,46,55,9 },
	{ 0,65,2,1,9,74,11,18,19,21,22,23,24,25,26,29,38,47,56,10 },
	{ 66,3,4,5,75,12,13,14,18,19,20,22,23,24,25,26,30,39,48,57 },
	{ 67,4,5,12,76,13,14,18,19,20,21,23,24,25,26,31,3,40,49,58 },
	{ 3,68,5,12,77,14,13,18,19,20,21,22,24,25,26,32,41,50,59,4 },
	{ 69,6,7,8,78,15,16,17,18,19,20,21,22,23,25,26,33,42,51,60 },
	{ 70,7,8,79,16,17,18,19,20,21,22,23,24,26,15,34,6,43,52,61 },
	{ 6,71,8,15,80,17,18,19,20,21,22,23,24,25,16,35,7,44,53,62 },
	{ 0,72,9,18,28,29,30,31,32,33,34,35,36,37,38,45,46,47,54,63 },
	{ 64,1,73,10,19,27,29,30,31,32,33,34,35,36,37,38,45,46,47,55 },
	{ 65,2,74,11,20,27,28,30,31,32,33,34,35,36,37,38,45,46,47,56 },
	{ 66,3,75,12,21,27,28,29,31,32,33,34,35,39,40,41,48,49,50,57 },
	{ 67,4,76,13,22,27,28,29,30,32,33,34,35,39,40,41,48,49,50,58 },
	{ 68,5,77,14,23,27,28,29,30,31,33,34,35,39,40,41,48,49,50,59 },
	{ 69,6,78,15,24,27,28,29,30,31,32,34,35,42,43,44,51,52,53,60 },
	{ 70,7,79,16,25,27,28,29,30,31,32,33,35,42,43,44,51,52,53,61 },
	{ 71,8,80,17,26,27,28,29,30,31,32,33,34,42,43,44,51,52,53,62 },
	{ 0,72,9,18,27,28,29,37,38,39,40,41,42,43,44,45,46,47,54,63 },
	{ 64,1,73,10,19,27,28,29,36,38,39,40,41,42,43,44,45,46,47,55 },
	{ 65,2,74,11,20,27,28,29,36,37,39,40,41,42,43,44,45,46,47,56 },
	{ 66,3,75,12,21,30,31,32,36,37,38,40,41,42,43,44,48,49,50,57 },
	{ 67,4,76,13,22,30,31,32,36,37,38,39,41,42,43,44,48,49,50,58 },
	{ 68,5,77,14,23,30,31,32,36,37,38,39,40,42,43,44,48,49,50,59 },
	{ 69,6,78,15,24,33,34,35,36,37,38,39,40,41,43,44,51,52,53,60 },
	{ 70,7,79,16,25,33,34,35,36,37,38,39,40,41,42,44,51,52,53,61 },
	{ 71,8,80,17,26,33,34,35,36,37,38,39,40,41,42,43,51,52,53,62 },
	{ 0,72,9,18,27,28,29,36,37,38,46,47,48,49,50,51,52,53,54,63 },
	{ 64,1,73,10,19,27,28,29,36,37,38,45,47,48,49,50,51,52,53,55 },
	{ 65,2,74,11,20,27,28,29,36,37,38,45,46,48,49,50,51,52,53,56 },
	{ 66,3,75,12,21,30,31,32,39,40,41,45,46,47,49,50,51,52,53,57 },
	{ 67,4,76,13,22,30,31,32,39,40,41,45,46,47,48,50,51,52,53,58 },
	{ 68,5,77,14,23,30,31,32,39,40,41,45,46,47,48,49,51,52,53,59 },
	{ 69,6,78,15,24,33,34,35,42,43,44,45,46,47,48,49,50,52,53,60 },
	{ 70,7,79,16,25,33,34,35,42,43,44,45,46,47,48,49,50,51,53,61 },
	{ 71,8,80,17,26,33,34,35,42,43,44,45,46,47,48,49,50,51,52,62 },
	{ 0,64,65,72,9,74,18,73,27,36,45,55,56,57,58,59,60,61,62,63 },
	{ 64,1,65,72,73,10,19,28,37,46,74,54,56,57,58,59,60,61,62,63 },
	{ 64,65,2,72,73,74,11,20,29,38,47,54,55,57,58,59,60,61,62,63 },
	{ 66,3,68,76,75,12,77,67,21,30,39,48,54,55,56,58,59,60,61,62 },
	{ 66,67,4,75,76,13,77,22,68,31,40,49,54,55,56,57,59,60,61,62 },
	{ 66,67,68,5,75,76,77,14,23,32,41,50,54,55,56,57,58,60,61,62 },
	{ 69,6,71,78,15,80,24,79,33,70,42,51,54,55,56,57,58,59,61,62 },
	{ 69,70,7,78,79,16,25,71,80,34,43,52,54,55,56,57,58,59,60,62 },
	{ 69,70,71,8,78,79,80,17,26,35,44,53,54,55,56,57,58,59,60,61 },
	{ 0,64,66,67,68,69,70,65,72,9,74,55,18,27,36,71,45,54,73,56 },
	{ 1,66,67,68,69,70,65,72,73,10,19,28,37,71,46,54,55,56,74,63 },
	{ 64,2,67,68,69,70,71,72,73,74,11,66,20,29,38,47,54,55,56,63 },
	{ 64,65,3,68,69,70,71,76,75,12,77,67,21,30,39,48,57,58,59,63 },
	{ 64,65,66,4,69,70,71,75,76,13,77,22,68,31,40,49,57,58,59,63 },
	{ 64,65,66,67,5,70,71,75,76,77,14,23,69,32,41,50,57,58,59,63 },
	{ 64,65,66,67,68,70,71,78,15,80,24,79,33,6,42,51,60,61,62,63 },
	{ 64,65,66,67,68,69,7,78,79,16,25,71,80,34,43,52,60,61,62,63 },
	{ 64,65,66,67,68,69,70,8,78,79,80,17,26,35,44,53,60,61,62,63 },
	{ 0,64,65,9,74,75,76,77,78,79,80,18,27,36,45,54,73,56,55,63 },
	{ 64,1,65,72,10,75,76,77,78,79,80,19,28,37,46,54,55,56,74,63 },
	{ 64,65,2,11,72,73,75,76,77,78,79,80,20,29,38,47,54,55,56,63 },
	{ 66,3,68,72,73,74,12,77,78,79,80,67,21,30,39,48,76,57,58,59 },
	{ 66,67,4,72,73,74,75,13,78,77,80,22,68,79,31,40,49,57,58,59 },
	{ 66,67,68,5,72,73,74,75,76,14,79,80,78,23,32,41,50,57,58,59 },
	{ 69,6,71,72,73,74,75,76,77,15,80,24,79,33,70,42,51,60,61,62 },
	{ 69,70,7,72,73,74,75,76,77,78,80,25,71,16,34,43,52,60,61,62 },
	{ 69,70,71,8,73,74,75,76,77,78,79,17,26,35,44,72,53,60,61,62 }
};

const short units[][3][9] = {
	{ { 0,9,18,27,36,45,54,63,72 },{ 0,1,2,3,4,5,6,7,8 },{ 0,1,2,9,10,11,18,19,20 } },
	{ { 1,10,19,28,37,46,55,64,73 },{ 0,1,2,3,4,5,6,7,8 },{ 0,1,2,9,10,11,18,19,20 } },
	{ { 2,11,20,29,38,47,56,65,74 },{ 0,1,2,3,4,5,6,7,8 },{ 0,1,2,9,10,11,18,19,20 } },
	{ { 3,12,21,30,39,48,57,66,75 },{ 0,1,2,3,4,5,6,7,8 },{ 3,4,5,12,13,14,21,22,23 } },
	{ { 4,13,22,31,40,49,58,67,76 },{ 0,1,2,3,4,5,6,7,8 },{ 3,4,5,12,13,14,21,22,23 } },
	{ { 5,14,23,32,41,50,59,68,77 },{ 0,1,2,3,4,5,6,7,8 },{ 3,4,5,12,13,14,21,22,23 } },
	{ { 6,15,24,33,42,51,60,69,78 },{ 0,1,2,3,4,5,6,7,8 },{ 6,7,8,15,16,17,24,25,26 } },
	{ { 7,16,25,34,43,52,61,70,79 },{ 0,1,2,3,4,5,6,7,8 },{ 6,7,8,15,16,17,24,25,26 } },
	{ { 8,17,26,35,44,53,62,71,80 },{ 0,1,2,3,4,5,6,7,8 },{ 6,7,8,15,16,17,24,25,26 } },
	{ { 0,9,18,27,36,45,54,63,72 },{ 9,10,11,12,13,14,15,16,17 },{ 0,1,2,9,10,11,18,19,20 } },
	{ { 1,10,19,28,37,46,55,64,73 },{ 9,10,11,12,13,14,15,16,17 },{ 0,1,2,9,10,11,18,19,20 } },
	{ { 2,11,20,29,38,47,56,65,74 },{ 9,10,11,12,13,14,15,16,17 },{ 0,1,2,9,10,11,18,19,20 } },
	{ { 3,12,21,30,39,48,57,66,75 },{ 9,10,11,12,13,14,15,16,17 },{ 3,4,5,12,13,14,21,22,23 } },
	{ { 4,13,22,31,40,49,58,67,76 },{ 9,10,11,12,13,14,15,16,17 },{ 3,4,5,12,13,14,21,22,23 } },
	{ { 5,14,23,32,41,50,59,68,77 },{ 9,10,11,12,13,14,15,16,17 },{ 3,4,5,12,13,14,21,22,23 } },
	{ { 6,15,24,33,42,51,60,69,78 },{ 9,10,11,12,13,14,15,16,17 },{ 6,7,8,15,16,17,24,25,26 } },
	{ { 7,16,25,34,43,52,61,70,79 },{ 9,10,11,12,13,14,15,16,17 },{ 6,7,8,15,16,17,24,25,26 } },
	{ { 8,17,26,35,44,53,62,71,80 },{ 9,10,11,12,13,14,15,16,17 },{ 6,7,8,15,16,17,24,25,26 } },
	{ { 0,9,18,27,36,45,54,63,72 },{ 18,19,20,21,22,23,24,25,26 },{ 0,1,2,9,10,11,18,19,20 } },
	{ { 1,10,19,28,37,46,55,64,73 },{ 18,19,20,21,22,23,24,25,26 },{ 0,1,2,9,10,11,18,19,20 } },
	{ { 2,11,20,29,38,47,56,65,74 },{ 18,19,20,21,22,23,24,25,26 },{ 0,1,2,9,10,11,18,19,20 } },
	{ { 3,12,21,30,39,48,57,66,75 },{ 18,19,20,21,22,23,24,25,26 },{ 3,4,5,12,13,14,21,22,23 } },
	{ { 4,13,22,31,40,49,58,67,76 },{ 18,19,20,21,22,23,24,25,26 },{ 3,4,5,12,13,14,21,22,23 } },
	{ { 5,14,23,32,41,50,59,68,77 },{ 18,19,20,21,22,23,24,25,26 },{ 3,4,5,12,13,14,21,22,23 } },
	{ { 6,15,24,33,42,51,60,69,78 },{ 18,19,20,21,22,23,24,25,26 },{ 6,7,8,15,16,17,24,25,26 } },
	{ { 7,16,25,34,43,52,61,70,79 },{ 18,19,20,21,22,23,24,25,26 },{ 6,7,8,15,16,17,24,25,26 } },
	{ { 8,17,26,35,44,53,62,71,80 },{ 18,19,20,21,22,23,24,25,26 },{ 6,7,8,15,16,17,24,25,26 } },
	{ { 0,9,18,27,36,45,54,63,72 },{ 27,28,29,30,31,32,33,34,35 },{ 27,28,29,36,37,38,45,46,47 } },
	{ { 1,10,19,28,37,46,55,64,73 },{ 27,28,29,30,31,32,33,34,35 },{ 27,28,29,36,37,38,45,46,47 } },
	{ { 2,11,20,29,38,47,56,65,74 },{ 27,28,29,30,31,32,33,34,35 },{ 27,28,29,36,37,38,45,46,47 } },
	{ { 3,12,21,30,39,48,57,66,75 },{ 27,28,29,30,31,32,33,34,35 },{ 30,31,32,39,40,41,48,49,50 } },
	{ { 4,13,22,31,40,49,58,67,76 },{ 27,28,29,30,31,32,33,34,35 },{ 30,31,32,39,40,41,48,49,50 } },
	{ { 5,14,23,32,41,50,59,68,77 },{ 27,28,29,30,31,32,33,34,35 },{ 30,31,32,39,40,41,48,49,50 } },
	{ { 6,15,24,33,42,51,60,69,78 },{ 27,28,29,30,31,32,33,34,35 },{ 33,34,35,42,43,44,51,52,53 } },
	{ { 7,16,25,34,43,52,61,70,79 },{ 27,28,29,30,31,32,33,34,35 },{ 33,34,35,42,43,44,51,52,53 } },
	{ { 8,17,26,35,44,53,62,71,80 },{ 27,28,29,30,31,32,33,34,35 },{ 33,34,35,42,43,44,51,52,53 } },
	{ { 0,9,18,27,36,45,54,63,72 },{ 36,37,38,39,40,41,42,43,44 },{ 27,28,29,36,37,38,45,46,47 } },
	{ { 1,10,19,28,37,46,55,64,73 },{ 36,37,38,39,40,41,42,43,44 },{ 27,28,29,36,37,38,45,46,47 } },
	{ { 2,11,20,29,38,47,56,65,74 },{ 36,37,38,39,40,41,42,43,44 },{ 27,28,29,36,37,38,45,46,47 } },
	{ { 3,12,21,30,39,48,57,66,75 },{ 36,37,38,39,40,41,42,43,44 },{ 30,31,32,39,40,41,48,49,50 } },
	{ { 4,13,22,31,40,49,58,67,76 },{ 36,37,38,39,40,41,42,43,44 },{ 30,31,32,39,40,41,48,49,50 } },
	{ { 5,14,23,32,41,50,59,68,77 },{ 36,37,38,39,40,41,42,43,44 },{ 30,31,32,39,40,41,48,49,50 } },
	{ { 6,15,24,33,42,51,60,69,78 },{ 36,37,38,39,40,41,42,43,44 },{ 33,34,35,42,43,44,51,52,53 } },
	{ { 7,16,25,34,43,52,61,70,79 },{ 36,37,38,39,40,41,42,43,44 },{ 33,34,35,42,43,44,51,52,53 } },
	{ { 8,17,26,35,44,53,62,71,80 },{ 36,37,38,39,40,41,42,43,44 },{ 33,34,35,42,43,44,51,52,53 } },
	{ { 0,9,18,27,36,45,54,63,72 },{ 45,46,47,48,49,50,51,52,53 },{ 27,28,29,36,37,38,45,46,47 } },
	{ { 1,10,19,28,37,46,55,64,73 },{ 45,46,47,48,49,50,51,52,53 },{ 27,28,29,36,37,38,45,46,47 } },
	{ { 2,11,20,29,38,47,56,65,74 },{ 45,46,47,48,49,50,51,52,53 },{ 27,28,29,36,37,38,45,46,47 } },
	{ { 3,12,21,30,39,48,57,66,75 },{ 45,46,47,48,49,50,51,52,53 },{ 30,31,32,39,40,41,48,49,50 } },
	{ { 4,13,22,31,40,49,58,67,76 },{ 45,46,47,48,49,50,51,52,53 },{ 30,31,32,39,40,41,48,49,50 } },
	{ { 5,14,23,32,41,50,59,68,77 },{ 45,46,47,48,49,50,51,52,53 },{ 30,31,32,39,40,41,48,49,50 } },
	{ { 6,15,24,33,42,51,60,69,78 },{ 45,46,47,48,49,50,51,52,53 },{ 33,34,35,42,43,44,51,52,53 } },
	{ { 7,16,25,34,43,52,61,70,79 },{ 45,46,47,48,49,50,51,52,53 },{ 33,34,35,42,43,44,51,52,53 } },
	{ { 8,17,26,35,44,53,62,71,80 },{ 45,46,47,48,49,50,51,52,53 },{ 33,34,35,42,43,44,51,52,53 } },
	{ { 0,9,18,27,36,45,54,63,72 },{ 54,55,56,57,58,59,60,61,62 },{ 54,55,56,63,64,65,72,73,74 } },
	{ { 1,10,19,28,37,46,55,64,73 },{ 54,55,56,57,58,59,60,61,62 },{ 54,55,56,63,64,65,72,73,74 } },
	{ { 2,11,20,29,38,47,56,65,74 },{ 54,55,56,57,58,59,60,61,62 },{ 54,55,56,63,64,65,72,73,74 } },
	{ { 3,12,21,30,39,48,57,66,75 },{ 54,55,56,57,58,59,60,61,62 },{ 57,58,59,66,67,68,75,76,77 } },
	{ { 4,13,22,31,40,49,58,67,76 },{ 54,55,56,57,58,59,60,61,62 },{ 57,58,59,66,67,68,75,76,77 } },
	{ { 5,14,23,32,41,50,59,68,77 },{ 54,55,56,57,58,59,60,61,62 },{ 57,58,59,66,67,68,75,76,77 } },
	{ { 6,15,24,33,42,51,60,69,78 },{ 54,55,56,57,58,59,60,61,62 },{ 60,61,62,69,70,71,78,79,80 } },
	{ { 7,16,25,34,43,52,61,70,79 },{ 54,55,56,57,58,59,60,61,62 },{ 60,61,62,69,70,71,78,79,80 } },
	{ { 8,17,26,35,44,53,62,71,80 },{ 54,55,56,57,58,59,60,61,62 },{ 60,61,62,69,70,71,78,79,80 } },
	{ { 0,9,18,27,36,45,54,63,72 },{ 63,64,65,66,67,68,69,70,71 },{ 54,55,56,63,64,65,72,73,74 } },
	{ { 1,10,19,28,37,46,55,64,73 },{ 63,64,65,66,67,68,69,70,71 },{ 54,55,56,63,64,65,72,73,74 } },
	{ { 2,11,20,29,38,47,56,65,74 },{ 63,64,65,66,67,68,69,70,71 },{ 54,55,56,63,64,65,72,73,74 } },
	{ { 3,12,21,30,39,48,57,66,75 },{ 63,64,65,66,67,68,69,70,71 },{ 57,58,59,66,67,68,75,76,77 } },
	{ { 4,13,22,31,40,49,58,67,76 },{ 63,64,65,66,67,68,69,70,71 },{ 57,58,59,66,67,68,75,76,77 } },
	{ { 5,14,23,32,41,50,59,68,77 },{ 63,64,65,66,67,68,69,70,71 },{ 57,58,59,66,67,68,75,76,77 } },
	{ { 6,15,24,33,42,51,60,69,78 },{ 63,64,65,66,67,68,69,70,71 },{ 60,61,62,69,70,71,78,79,80 } },
	{ { 7,16,25,34,43,52,61,70,79 },{ 63,64,65,66,67,68,69,70,71 },{ 60,61,62,69,70,71,78,79,80 } },
	{ { 8,17,26,35,44,53,62,71,80 },{ 63,64,65,66,67,68,69,70,71 },{ 60,61,62,69,70,71,78,79,80 } },
	{ { 0,9,18,27,36,45,54,63,72 },{ 72,73,74,75,76,77,78,79,80 },{ 54,55,56,63,64,65,72,73,74 } },
	{ { 1,10,19,28,37,46,55,64,73 },{ 72,73,74,75,76,77,78,79,80 },{ 54,55,56,63,64,65,72,73,74 } },
	{ { 2,11,20,29,38,47,56,65,74 },{ 72,73,74,75,76,77,78,79,80 },{ 54,55,56,63,64,65,72,73,74 } },
	{ { 3,12,21,30,39,48,57,66,75 },{ 72,73,74,75,76,77,78,79,80 },{ 57,58,59,66,67,68,75,76,77 } },
	{ { 4,13,22,31,40,49,58,67,76 },{ 72,73,74,75,76,77,78,79,80 },{ 57,58,59,66,67,68,75,76,77 } },
	{ { 5,14,23,32,41,50,59,68,77 },{ 72,73,74,75,76,77,78,79,80 },{ 57,58,59,66,67,68,75,76,77 } },
	{ { 6,15,24,33,42,51,60,69,78 },{ 72,73,74,75,76,77,78,79,80 },{ 60,61,62,69,70,71,78,79,80 } },
	{ { 7,16,25,34,43,52,61,70,79 },{ 72,73,74,75,76,77,78,79,80 },{ 60,61,62,69,70,71,78,79,80 } },
	{ { 8,17,26,35,44,53,62,71,80 },{ 72,73,74,75,76,77,78,79,80 },{ 60,61,62,69,70,71,78,79,80 } },
};

//const 

struct Grid
{
	short g;
	short l;
};

int lengthOfValueSquare(short s, int *theOnly);
int gridEliminate(Grid *v, int , int d);
int squareAssign(Grid *v, int, int d);
int parseGrid(int sudoku[9][9], Grid v[9][9]);
void shuffleArr(int * arrange, int len);
int depthSearch(Grid *v);

//取出某十进制位模式数的右第n位。
int decExtract(int dec, int n)
{
	for (int i = 0; i < n; i++)
	{
		dec /= 10;
	}
	return dec % 10;
}

//设置某十进制位模式数的右第n位。
void decSet(int *dec, int digit, int numToSet)
{
	int decMeta = 1;
	for (int i = 0; i < digit; i++)
	{
		decMeta *= 10;
	}
	*dec -= decExtract(*dec, digit) * decMeta;
	*dec += numToSet * decMeta;
}

int validSudoku(int sudoku[9][9])
{
	//检查数独的正确性
	//overMap中每个格为一个bitmap，次高位->低位: 行-列-宫 是否冲突；最高位：是否将底色标记为冲突
	//返回-2表示有非法数字，返回1及以上表示数独冲突


	int result = 0, thisResult, lastResult;
	int currNum;
	int currNonu;	//用以位运算(10进制)操作查重
	int posOccu;

	//行、列查重
	for (int m = 0; m < 2 && result >= 0; m++)
	{

		for (int j = 0; j < 9 && result >= 0; j++)
		{
			currNonu = 0x0;
			thisResult = 0;
			lastResult = result;
			for (int i = 0; i < 9 && result >= 0; i++)
			{
				currNum = m == 0 ? (sudoku[j][i]) : (sudoku[i][j]);
				if (m == 0 && (currNum < 0 || currNum > 9))
				{
					result = -2;
					break;
				}
				if (currNum == 0)
					continue;
				if (posOccu = decExtract(currNonu, currNum - 1))
				{
					//position Ocuupied, Conflict Exist
					thisResult = 1;
					result = lastResult + thisResult;

				}
				else
				{
					//position not Ocuupied, so Occupy it
					decSet(&currNonu, currNum - 1, i);
				}

			}
		}
	}

	if (result < 0)
		return result;


	//宫查重
	for (int j = 1; j <= 9 && result >= 0; j++)  //宫号
	{
		currNonu = 0x0;
		thisResult = 0;
		lastResult = result;
		for (int i = 1; i <= 9 && result >= 0; i++)  //格号
		{
			int translatedJ = (j - 1) / 3 * 3 + (i - 1) / 3;
			int translatedI = (j - 1) % 3 * 3 + (i - 1) % 3;
			currNum = sudoku[translatedJ][translatedI];

			if (currNum == 0)
				continue;

			if (posOccu = decExtract(currNonu, currNum - 1))
			{
				thisResult = 1;
				result = lastResult + thisResult;
			}
			else
			{
				decSet(&currNonu, currNum - 1, i);
			}

		}
	}
	return result;
}


int solving_sudoku(int sudoku[9][9])
{
	Grid v[9][9];
	int i, j;
	unsigned long tmp;
	int err;
	err = validSudoku(sudoku);
	if (err == -2)
	{
		return -1;
	}
	else
	{
		if(err != 0)
			return -2;
	}
	err = parseGrid(sudoku, v);
	if (err)
	{
		return err;
	}
	err = depthSearch((Grid*)(v));
	if (err)
	{
		return -3;
	}
	for (j = 0; j < 9; j++)
	{
		for (i = 0; i < 9; i++)
		{
			if (!sudoku[j][i])
			{
				_BitScanForward(&tmp, v[j][i].g);
				sudoku[j][i] = tmp;
				/*while (!(v[j][i].g & 1))
					sudoku[j][i]++, v[j][i].g >>= 1;*/
			}
		}
	}
	return 0;
}

int gridEliminate(Grid *v, int gridNum, int d)
{
	int theOnly, g;
	int err = 0, count = 0, t;
	unsigned long tmp;
	short onlyMask = 1 << d;
	if ((v[gridNum].g & onlyMask))
	{
		v[gridNum].g &= ~onlyMask;
		v[gridNum].l--;
		if (!v[gridNum].l)
			return -2;
		if (v[gridNum].l == 1)
		{
			_BitScanForward(&tmp, v[gridNum].g);
			err = 0;
			for (g = 0; g < 20 && !err; g++)
			{
				err = gridEliminate(v, peers[gridNum][g], tmp);
			}
			
			if (err)
				return -2;
		}

		
		for (t = 0; t < 3; t++)
		{
			count = 0;
			for (g = 0; g < 9; g++)
			{
				
				if (v[units[gridNum][t][g]].g & onlyMask)
				{
					count++;
					theOnly = units[gridNum][t][g];
				}
			}
			if (count == 0)
				return -2;
			else if (count == 1)
			{
				err = squareAssign(v, theOnly, d);
				if (err == -2)
					return -2;
			}
		}
		
	}
	return 0;
}

int squareAssign(Grid *v, int gridNum, int d)
{
	int err, dc;
	for (dc = 1; dc <= 9; dc++)
	{
		if (dc == d || !(v[gridNum].g & (1 << dc)))
			continue;
		err = gridEliminate(v, gridNum, dc);
		if (err == -2)
			return -2;
	}
	return 0;
}

int parseGrid(int sudoku[9][9], Grid v[9][9])
{
	int status, g;
	for (g = 0; g < 81; g++)
	{
		((Grid*)(v))[g].g = short(1022);
		((Grid*)(v))[g].l = 9;
	}


	for (int j = 0; j < 9; j++)
	{
		for (int i = 0; i < 9; i++)
		{
			if (sudoku[j][i] < 0 || sudoku[j][i] > 9)
				return -1;
			if (sudoku[j][i] != 0)
			{
				status = squareAssign((Grid *)(v), 9 * j + i, sudoku[j][i]);
				if (status == -2)
					return -3;
			}
		}
	}
	return 0;
}

int depthSearch(Grid *v)
{
	int minLen = 10, currLen, err;
	int minimizer, g;
	int arrange[9] = { 1,2,3,4,5,6,7,8,9 };
	Grid *vm;
	Grid vd[9][9];
	bool win = true;
	
	int d;

	//shuffleArr(arrange, 9);

	for (g = 0; g < 81; g++)
	{
		currLen = v[g].l;
		if (currLen != 1)
		{
			win = false;
			if (currLen < minLen)
			{
				minLen = currLen;
				minimizer = g;
			}
		}
	}

	if (win)
	{
		return 0;
	}

	vm = v + minimizer;
	for (int dx = 1; dx <= 9; dx++)
	{
		d = arrange[dx-1];
		if (vm->g & (1 << d))
		{
			memcpy_s(vd, sizeof(vd), v, 81 * sizeof(Grid));
			err = squareAssign((Grid *)vd, minimizer, d);
			if (err == -2)
			{
				continue;
			}
			err = depthSearch((Grid *)vd);
			if (err == -1)
			{
				return -1;
			}
			if (err != -2)
			{
				memcpy_s(v, 81 * sizeof(Grid), vd, sizeof(vd));
				return 0;
			}
		}
	}
	return -2;
}
void shuffleArr(int * arrange, int len)
{
	int swapTo, tmpVar;
	for (int i = 1; i < len; i++)
	{
		swapTo = rand() % (len - i);
		tmpVar = arrange[len - i];
		arrange[len - i] = arrange[swapTo];
		arrange[swapTo] = tmpVar;
	}
}